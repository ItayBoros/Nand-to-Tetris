// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
    

    Not(in=instruction[15], out=notInstruction15);
    And(a=instruction[15], b=instruction[5], out=ALUtoA);
    Or(a=notInstruction15, b=ALUtoA, out=ARegisterLoad);


    Mux16(a=instruction , b=outALU , sel=ALUtoA , out=FirstMuxtoA);
    ARegister(in=FirstMuxtoA , load=ARegisterLoad , out=Aout);

    Mux16(a=Aout , b=inM , sel=instruction[12] , out=outoALU);

    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU , load=loadD, out=outD );

    ALU(x=outD , y=outoALU , zx=instruction[11] , nx=instruction[10]
     , zy=instruction[9] , ny=instruction[8] , f=instruction[7]
     , no=instruction[6] , out=outALU , out=outM , zr=zr , ng=ng);
    
    
    And(a=instruction[3], b=instruction[15], out=writeM);
    Or16(a=false, b=Aout, out[0..14]=addressM);


    Not(in=zr , out=notzr);
    Not(in=ng , out=notng);

    And(a=instruction[2], b=ng, out=jumpLT);     
    And(a=instruction[1], b=zr, out=jumpEQ);     

    And(a= notzr, b= notng, out=con1);
    And(a=instruction[0], b=con1, out=jumpGT);  

    Or(a=jumpLT, b=jumpEQ, out=jumpTemp);
    Or(a=jumpTemp, b=jumpGT, out=jumptoA);

    And(a=instruction[15], b=jumptoA, out=PCload);

    Not(in=PCload , out=PCinc);

    PC(in=Aout , load=PCload , inc=PCinc , reset=reset , out[0..14]=pc );

}